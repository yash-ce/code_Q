int peek(){
  return Stack[top];
}
/*
int Stack[SIZE], top=-1;
int isFull();
int isEmpty();
int push(int item);
int pop();
Above variables are used for Stack, SIZE and top and all are global variables. Also above push and pop functions are provided. */
int isOperand(char ch)
{
  return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (isdigit(ch));
}
int checkPrecedence(char ch)
{
  switch (ch)
  {
    case '+':
    case '-':      return 1;
    case '*':
    case '/':      return 2;
    case '^':      return 3;
  }
  return -1;
}
int infixToPostfix(char exp[], char output[])
{
  int i=0, k=0;
  while(exp[i])
  {
    if (isOperand(exp[i]))	// If the scanned character is an operand, add it to output.
      output[k++] = exp[i];
    else if (exp[i] == '(')	// If the scanned character is an ‘(‘, push it to the stack.
      push(exp[i]);
    else if (exp[i] == ')')	// If the scanned character is an ‘)’, pop and output from the stack until an ‘(‘ is encountered.
    {
      while (!isEmpty() && peek() != '(')
        output[k++] = pop();
      if (!isEmpty() && peek() != '(')
        return -1; // invalid expression             
      else
        pop();  // Discard the '(' on stack
    }
    else // an operator is encountered
    {
      while (!isEmpty() && checkPrecedence(exp[i]) <= checkPrecedence(peek()))
        output[k++] = pop();
      push(exp[i]);
    }
    i++;
  }
  while (!isEmpty())	  // pop all the operators from the stack
    output[k++] = pop();
  output[k++] = '\0';	// Place an ending string terminator.
}
